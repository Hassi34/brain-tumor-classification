version: 2.1

executors:
  docker-publisher:
    environment:
      IMAGE_NAME_DOCKER_HUB: hassi34/brain-tumor-classifier:latest
      IMAGE_NAME_ARTIFACT_REGISTRY: braintumor/brain-tumor:latest
      GCLOUD_APP_SERVICE : default
    docker:
      - image: google/cloud-sdk
    resource_class: medium

jobs:
  continuous-integration:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - run:
          name: install-dependencies
          command: |
            sudo apt install software-properties-common
            sudo apt update
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt install python3.10
            sudo apt install python3-pip
            pip3 install flake8
      - run:
          name: lint-with-flake8
          command: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  continuous-training:
    docker:
      - image: google/cloud-sdk
    resource_class: large
    steps:
      - checkout
      - run:
          name: Model Training
          command: |
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> TRAINING ENVIRONMENT SETUP >>>>>>>>>>>>>>>>>>"
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Install Miniconda >>>>>>>>>>>>>>>>>>"
            apt update
            apt install wget
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
                && mkdir /root/.conda \
                && bash Miniconda3-latest-Linux-x86_64.sh -b \
                && rm -f Miniconda3-latest-Linux-x86_64.sh 
            export PATH="/root/miniconda3/bin:${PATH}"
            echo "Running $(conda --version)"
            conda init bash
            . /root/.bashrc
            conda update -n base -c defaults conda -y
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Create Environment >>>>>>>>>>>>>>>>>>"
            conda create -n myenv python=3.10 -y
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Activate Environment >>>>>>>>>>>>>>>>>>"
            conda activate myenv
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Install Requirements >>>>>>>>>>>>>>>>>>"
            pip install -r requirements.txt
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Authenticate GCP >>>>>>>>>>>>>>>>>>"
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Project Folder Structure >>>>>>>>>>>>>>>>>>"
            python template.py
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Download data from Source >>>>>>>>>>>>>>>>>>"
            python src/stage_01_get_data.py --config=configs/config.yaml
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Prepare Model >>>>>>>>>>>>>>>>>>"
            python src/stage_02_prepare_model.py --config=configs/config.yaml --params=params.yaml
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Model Training and Evaluation >>>>>>>>>>>>>>>>>>"
            python src/stage_03_train_evaluate.py --config=configs/config.yaml --params=params.yaml
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> Model blessing >>>>>>>>>>>>>>>>>>"
            python src/stage_04_model_blessing.py --config=configs/config.yaml --params=params.yaml
            echo [$(date)]: ">>>>>>>>>>>>>>>>>> TRAINING COMPLETED >>>>>>>>>>>>>>>>>>"
          no_output_timeout: 1h

  continuous-building:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
      - run:
          name: Build Docker image
          command: | 
            chmod +x ./scripts/serving_setup.sh
            ./scripts/serving_setup.sh
            docker build -t $IMAGE_NAME_DOCKER_HUB .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME_DOCKER_HUB
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  continuous-delivery:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      # - checkout
      - setup_remote_docker
      # - run:
      #     name: Install dependencies
      #     command: |
      #       pip install cryptography python-dotenv
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME_DOCKER_HUB
      - run: 
          name: Docker Login GCP
          command: gcloud auth configure-docker us-east1-docker.pkg.dev
      - run:
          name: Publish Docker Image to GCP Artifact Registry
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            docker tag $IMAGE_NAME_DOCKER_HUB us-east1-docker.pkg.dev/mlops-378116/$IMAGE_NAME_ARTIFACT_REGISTRY
            gcloud docker -- push us-east1-docker.pkg.dev/mlops-378116/$IMAGE_NAME_ARTIFACT_REGISTRY

  continuous-deployment:
    executor: docker-publisher
    steps:
      - checkout
      - run: 
          name: Deploy Docker Image to Google Compute Engine
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            cp ./model_serving/app.yaml ./app.yaml
            gcloud config set project $CLOUDSDK_CORE_PROJECT
            gcloud app deploy --image-url=us-east1-docker.pkg.dev/mlops-378116/$IMAGE_NAME_ARTIFACT_REGISTRY --no-promote
      - run:
          name: Sanity check alert
          command: |
            chmod +x ./scripts/sanity_check_alert.sh
            ./scripts/sanity_check_alert.sh

  promote-to-production:
    executor: docker-publisher
    steps:
      - run: 
          name: Set up GCloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project $CLOUDSDK_CORE_PROJECT
      - run: 
          name: Migrate traffic
          command: gcloud app services set-traffic ${GCLOUD_APP_SERVICE} --splits=$(gcloud app versions list --sort-by="~last_deployed_time" --limit=1 --format="value(id)")=1
      - run: 
          name: Stop previous version
          command: gcloud app versions stop --service=${GCLOUD_APP_SERVICE} $(gcloud app versions list --filter="traffic_split=0" --sort-by="~last_deployed_time" --limit=1 --format="value(id)")

workflows:
  Development:
    jobs:
      - continuous-integration

      - continuous-training:
          requires:
            - continuous-integration
          filters:
            branches:
              only:
                - dev


  Staging:
    jobs:
      - continuous-integration

      - continuous-training:
          requires:
            - continuous-integration
          filters:
            branches:
              only:
                - staging
                
      - continuous-building:
          requires:
            - continuous-training
      - continuous-delivery:
          requires:
            - continuous-building
      - continuous-deployment:
          requires:
            - continuous-delivery
      - sanity-check:
          type: approval
          requires:
          - continuous-deployment

  Production:
    jobs:
      - continuous-integration

      - continuous-training:
          requires:
            - continuous-integration
      - continuous-building:
          requires:
            - continuous-training
      - continuous-delivery:
          requires:
            - continuous-building
      - continuous-deployment:
          requires:
            - continuous-delivery
      - sanity-check:
          type: approval
          requires:
          - continuous-deployment
      - promote-to-production:
          requires:
            - continuous-deployment
            - sanity-check

          filters:
            branches:
              only:
                - main

  # Scheduled Sensors CICD:
  #   triggers:
  #     - schedule:
  #         cron: "5 12 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - continuous-integration

  #     - continuous-training-delivery:
  #         requires:
  #           - continuous-integration

  #     - sanity-check:
  #         type: approval
  #         requires:
  #         - continuous-training-delivery

  #     - continuous-deployment:
  #         requires:
  #           - continuous-training-delivery
  #           - sanity-check

  # Serving Pipeline:
  #   jobs:
  #     - continuous-integration

  #     - continuous-serving:
  #         requires:
  #           - continuous-integration
  #         filters:
  #           branches:
  #             only:
  #               - main

  # Scheduled Serving Pipeline:
  #   triggers:
  #     - schedule:
  #         cron: "5 1 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - continuous-integration

  #     - continuous-serving:
  #         requires:
  #           - continuous-integration
          